
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  profileImage: 'profileImage',
  address: 'address',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  clerkId: 'clerkId'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  licenseNumber: 'licenseNumber',
  licenseExpiryDate: 'licenseExpiryDate',
  isAvailable: 'isAvailable',
  currentLatitude: 'currentLatitude',
  currentLongitude: 'currentLongitude',
  averageRating: 'averageRating',
  totalRides: 'totalRides',
  accountStatus: 'accountStatus',
  backgroundCheckStatus: 'backgroundCheckStatus',
  backgroundCheckDate: 'backgroundCheckDate',
  isOnline: 'isOnline',
  acceptsFemaleOnly: 'acceptsFemaleOnly',
  bankAccount: 'bankAccount'
};

exports.Prisma.PassengerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  prefersFemaleDriver: 'prefersFemaleDriver',
  totalRides: 'totalRides',
  averageRating: 'averageRating',
  specialNeeds: 'specialNeeds',
  specialNeedsDesc: 'specialNeedsDesc',
  homeAddress: 'homeAddress',
  homeLatitude: 'homeLatitude',
  homeLongitude: 'homeLongitude',
  workAddress: 'workAddress',
  workLatitude: 'workLatitude',
  workLongitude: 'workLongitude'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  make: 'make',
  model: 'model',
  year: 'year',
  color: 'color',
  licensePlate: 'licensePlate',
  registrationExpiryDate: 'registrationExpiryDate',
  insuranceExpiryDate: 'insuranceExpiryDate',
  vehicleType: 'vehicleType',
  capacity: 'capacity',
  accessibility: 'accessibility',
  carImageUrl: 'carImageUrl',
  features: 'features',
  inspectionStatus: 'inspectionStatus',
  inspectionDate: 'inspectionDate'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  passengerId: 'passengerId',
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  status: 'status',
  requestTime: 'requestTime',
  acceptTime: 'acceptTime',
  pickupTime: 'pickupTime',
  dropOffTime: 'dropOffTime',
  originAddress: 'originAddress',
  originLatitude: 'originLatitude',
  originLongitude: 'originLongitude',
  destinationAddress: 'destinationAddress',
  destinationLatitude: 'destinationLatitude',
  destinationLongitude: 'destinationLongitude',
  estimatedDuration: 'estimatedDuration',
  actualDuration: 'actualDuration',
  estimatedDistance: 'estimatedDistance',
  actualDistance: 'actualDistance',
  basePrice: 'basePrice',
  finalPrice: 'finalPrice',
  currency: 'currency',
  paymentStatus: 'paymentStatus',
  paymentMethodId: 'paymentMethodId',
  cancellationReason: 'cancellationReason',
  cancellationTime: 'cancellationTime',
  cancellationFee: 'cancellationFee',
  isFemaleOnlyRide: 'isFemaleOnlyRide',
  specialRequirements: 'specialRequirements',
  baggageQuantity: 'baggageQuantity',
  rideType: 'rideType',
  scheduledTime: 'scheduledTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentIntentId: 'paymentIntentId',
  stripeCustomerId: 'stripeCustomerId',
  receiptUrl: 'receiptUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  ratedByUserId: 'ratedByUserId',
  ratedUserId: 'ratedUserId',
  rating: 'rating',
  review: 'review',
  cleanliness: 'cleanliness',
  drivingSkill: 'drivingSkill',
  courtesy: 'courtesy',
  createdAt: 'createdAt'
};

exports.Prisma.RideLocationScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  latitude: 'latitude',
  longitude: 'longitude',
  timestamp: 'timestamp',
  speed: 'speed',
  bearing: 'bearing',
  accuracy: 'accuracy',
  userType: 'userType'
};

exports.Prisma.DriverDocumentScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  issuedDate: 'issuedDate',
  expiryDate: 'expiryDate',
  isVerified: 'isVerified',
  verificationDate: 'verificationDate',
  documentUrl: 'documentUrl',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.Status = exports.$Enums.Status = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  ECONOMY: 'ECONOMY',
  COMFORT: 'COMFORT',
  LUXURY: 'LUXURY',
  SUV: 'SUV',
  VAN: 'VAN'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  REQUESTED: 'REQUESTED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.RideType = exports.$Enums.RideType = {
  STANDARD: 'STANDARD',
  SCHEDULED: 'SCHEDULED',
  SHARED: 'SHARED'
};

exports.UserType = exports.$Enums.UserType = {
  DRIVER: 'DRIVER',
  PASSENGER: 'PASSENGER'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  VEHICLE_REGISTRATION: 'VEHICLE_REGISTRATION',
  VEHICLE_INSURANCE: 'VEHICLE_INSURANCE',
  BACKGROUND_CHECK: 'BACKGROUND_CHECK',
  PROFILE_PHOTO: 'PROFILE_PHOTO',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Driver: 'Driver',
  Passenger: 'Passenger',
  Vehicle: 'Vehicle',
  Ride: 'Ride',
  Payment: 'Payment',
  Rating: 'Rating',
  RideLocation: 'RideLocation',
  DriverDocument: 'DriverDocument'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
