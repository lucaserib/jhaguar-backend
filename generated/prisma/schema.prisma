generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  phone        String    @unique
  firstName    String
  lastName     String
  gender       Gender // MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY
  dateOfBirth  DateTime?
  profileImage String? // URL para imagem
  address      String?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relações
  driver    Driver?
  passenger Passenger?
  ratings   Rating[]

  // Auth
  clerkId String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Driver {
  id                    String    @id @default(uuid())
  userId                String    @unique
  licenseNumber         String    @unique
  licenseExpiryDate     DateTime
  isAvailable           Boolean   @default(false)
  currentLatitude       Float?
  currentLongitude      Float?
  averageRating         Float     @default(0)
  totalRides            Int       @default(0)
  accountStatus         Status    @default(PENDING) // PENDING, APPROVED, REJECTED, SUSPENDED
  backgroundCheckStatus Status    @default(PENDING)
  backgroundCheckDate   DateTime?
  isOnline              Boolean   @default(false)
  acceptsFemaleOnly     Boolean   @default(false) // Se aceita corridas apenas para mulheres

  // Informações bancárias (considere criptografar estes dados)
  bankAccount String?

  // Relações
  user      User             @relation(fields: [userId], references: [id])
  vehicle   Vehicle?
  rides     Ride[]
  documents DriverDocument[]

  @@index([currentLatitude, currentLongitude])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Passenger {
  id                  String  @id @default(uuid())
  userId              String  @unique
  prefersFemaleDriver Boolean @default(false)
  totalRides          Int     @default(0)
  averageRating       Float   @default(0)
  specialNeeds        Boolean @default(false)
  specialNeedsDesc    String?

  // Locais favoritos
  homeAddress   String?
  homeLatitude  Float?
  homeLongitude Float?
  workAddress   String?
  workLatitude  Float?
  workLongitude Float?

  // Relações
  user  User   @relation(fields: [userId], references: [id])
  rides Ride[]
}

model Vehicle {
  id                     String      @id @default(uuid())
  driverId               String      @unique
  make                   String
  model                  String
  year                   Int
  color                  String
  licensePlate           String      @unique
  registrationExpiryDate DateTime
  insuranceExpiryDate    DateTime
  vehicleType            VehicleType
  capacity               Int
  accessibility          Boolean     @default(false)
  carImageUrl            String?
  features               String[] // AC, WiFi, etc.
  inspectionStatus       Status      @default(PENDING)
  inspectionDate         DateTime?

  // Relações
  driver Driver @relation(fields: [driverId], references: [id])
  rides  Ride[]
}

enum VehicleType {
  ECONOMY
  COMFORT
  LUXURY
  SUV
  VAN
}

model Ride {
  id          String     @id @default(uuid())
  passengerId String
  driverId    String?
  vehicleId   String?
  status      RideStatus @default(REQUESTED)

  // Datas importantes
  requestTime DateTime  @default(now())
  acceptTime  DateTime?
  pickupTime  DateTime?
  dropOffTime DateTime?

  // Origem
  originAddress   String
  originLatitude  Float
  originLongitude Float

  // Destino
  destinationAddress   String
  destinationLatitude  Float
  destinationLongitude Float

  // Detalhes da corrida
  estimatedDuration Int // minutos
  actualDuration    Int?
  estimatedDistance Float // quilômetros
  actualDistance    Float?
  basePrice         Float
  finalPrice        Float?
  currency          String        @default("BRL")
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethodId   String?

  // Cancelamento
  cancellationReason String?
  cancellationTime   DateTime?
  cancellationFee    Float?

  // Opções especiais
  isFemaleOnlyRide    Boolean   @default(false)
  specialRequirements String?
  baggageQuantity     Int       @default(0)
  rideType            RideType  @default(STANDARD)
  scheduledTime       DateTime?

  // Relações
  passenger Passenger      @relation(fields: [passengerId], references: [id])
  driver    Driver?        @relation(fields: [driverId], references: [id])
  vehicle   Vehicle?       @relation(fields: [vehicleId], references: [id])
  ratings   Rating[]
  payment   Payment?
  locations RideLocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([passengerId])
  @@index([driverId])
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  CANCELLED
  IN_PROGRESS
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum RideType {
  STANDARD
  SCHEDULED
  SHARED
}

model Payment {
  id               String        @id @default(uuid())
  rideId           String        @unique
  amount           Float
  currency         String        @default("BRL")
  status           PaymentStatus @default(PENDING)
  paymentMethod    String
  paymentIntentId  String? // ID do Stripe
  stripeCustomerId String?
  receiptUrl       String?

  // Relações
  ride Ride @relation(fields: [rideId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id            String  @id @default(uuid())
  rideId        String
  ratedByUserId String
  ratedUserId   String
  rating        Float // 1-5
  review        String?

  // Categorias específicas de avaliação
  cleanliness  Float?
  drivingSkill Float?
  courtesy     Float?

  // Relações
  ride    Ride @relation(fields: [rideId], references: [id])
  ratedBy User @relation(fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now())

  @@unique([rideId, ratedByUserId, ratedUserId])
}

model RideLocation {
  id        String   @id @default(uuid())
  rideId    String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  speed     Float?
  bearing   Float?
  accuracy  Float?
  userType  UserType // DRIVER ou PASSENGER

  // Relações
  ride Ride @relation(fields: [rideId], references: [id])

  @@index([rideId, timestamp])
}

enum UserType {
  DRIVER
  PASSENGER
}

model DriverDocument {
  id               String       @id @default(uuid())
  driverId         String
  documentType     DocumentType
  documentNumber   String?
  issuedDate       DateTime?
  expiryDate       DateTime?
  isVerified       Boolean      @default(false)
  verificationDate DateTime?
  documentUrl      String // URL do documento armazenado
  notes            String?

  // Relações
  driver Driver @relation(fields: [driverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([driverId, documentType])
}

enum DocumentType {
  DRIVERS_LICENSE
  VEHICLE_REGISTRATION
  VEHICLE_INSURANCE
  BACKGROUND_CHECK
  PROFILE_PHOTO
  OTHER
}
